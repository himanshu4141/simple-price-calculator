{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component } from '@angular/core';\nimport { PricingService } from '../../services/pricing.service';\nlet PriceCalculatorComponent = class PriceCalculatorComponent {\n  constructor(pricingService) {\n    this.pricingService = pricingService;\n    this.productFamilies = [];\n    this.selectedTerm = '1year'; // State for each product family\n\n    this.selections = {};\n    this.combinedTotal = null;\n  }\n\n  ngOnInit() {\n    this.pricingService.fetchPricingData().subscribe(data => {\n      if (data && Array.isArray(data.productFamilies)) {\n        this.productFamilies = data.productFamilies; // Initialize state for each family\n\n        for (const family of this.productFamilies) {\n          this.selections[family.name] = {\n            selectedPlan: '',\n            seats: 1,\n            packages: 0,\n            apiCalls: 0,\n            totalPrice: null\n          };\n        }\n      }\n    });\n  }\n\n  getPlans(familyName) {\n    const family = this.productFamilies.find(f => f.name === familyName);\n    return family ? family.plans : [];\n  }\n\n  showSignOptions(familyName) {\n    var _a;\n\n    return familyName === 'Nitro Sign' && !!((_a = this.selections[familyName]) === null || _a === void 0 ? void 0 : _a.selectedPlan);\n  }\n\n  calculateTotal() {\n    let total = 0;\n\n    for (const family of this.productFamilies) {\n      const sel = this.selections[family.name];\n\n      if (!sel.selectedPlan) {\n        sel.totalPrice = null;\n        continue;\n      } // Calculate price breakdown for Nitro Sign (with free packages)\n\n\n      let price = this.pricingService.calculatePrice(family, sel.selectedPlan, sel.seats, sel.packages, sel.apiCalls, this.selectedTerm); // For Nitro Sign, show breakdown\n\n      if (family.name === 'Nitro Sign') {\n        const plan = family.plans.find(p => p.name === sel.selectedPlan);\n\n        if (plan) {\n          const freePackages = (plan.freePackagesPerSeat || 0) * sel.seats;\n          const extraPackages = Math.max(0, sel.packages - freePackages);\n          const packageCost = extraPackages * (plan.packagePrice || 0);\n          const apiCost = sel.apiCalls * (plan.apiPrice || 0);\n          const seatUnitPrice = this.pricingService.getRampPrice(plan, sel.seats, this.selectedTerm);\n          const seatCost = seatUnitPrice * sel.seats;\n          sel.breakdown = {\n            seatCost,\n            packageCost,\n            apiCost,\n            freePackages,\n            extraPackages\n          };\n          price = seatCost + packageCost + apiCost;\n        }\n      } else {\n        // For PDF, just show seat cost\n        const plan = family.plans.find(p => p.name === sel.selectedPlan);\n\n        if (plan) {\n          const seatUnitPrice = this.pricingService.getRampPrice(plan, sel.seats, this.selectedTerm);\n          const seatCost = seatUnitPrice * sel.seats;\n          sel.breakdown = {\n            seatCost,\n            seatUnitPrice\n          };\n        }\n      }\n\n      sel.totalPrice = price;\n      total += sel.totalPrice || 0;\n    }\n\n    this.combinedTotal = total > 0 ? total : null;\n  }\n\n};\nPriceCalculatorComponent = __decorate([Component({\n  selector: 'app-price-calculator',\n  templateUrl: './price-calculator.component.html',\n  styleUrls: ['./price-calculator.component.scss']\n}), __metadata(\"design:paramtypes\", [PricingService])], PriceCalculatorComponent);\nexport { PriceCalculatorComponent };","map":null,"metadata":{},"sourceType":"module"}