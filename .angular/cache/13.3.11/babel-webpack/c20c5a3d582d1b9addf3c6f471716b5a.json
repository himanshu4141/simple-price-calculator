{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PricingService = /*#__PURE__*/(() => {\n  class PricingService {\n    constructor(http) {\n      this.http = http;\n      this.pricingDataUrl = 'assets/pricing-data.json';\n    }\n\n    fetchPricingData() {\n      return this.http.get(this.pricingDataUrl).pipe(catchError(() => of({\n        productFamilies: []\n      })));\n    }\n\n    calculatePrice(productFamily, planName, seats, packages = 0, apiCalls = 0, term) {\n      const plan = productFamily.plans.find(p => p.name === planName);\n      if (!plan) return 0;\n      const pricing = term === '1year' ? plan.oneYearPricing : plan.threeYearPricing;\n      const applicableTier = [...pricing].sort((a, b) => b.minSeats - a.minSeats).find(tier => seats >= tier.minSeats);\n      if (!applicableTier) return 0;\n      let total = seats * applicableTier.price;\n\n      if (plan.freePackagesPerSeat && plan.packagePrice) {\n        const freePackages = seats * plan.freePackagesPerSeat;\n        const extraPackages = Math.max(0, packages - freePackages);\n        total += extraPackages * plan.packagePrice;\n      }\n\n      if (plan.apiPrice && apiCalls > 0) {\n        total += apiCalls * plan.apiPrice;\n      }\n\n      return total;\n    } // Helper to get ramp price per seat for a plan\n\n\n    getRampPrice(plan, seats, term) {\n      const pricing = term === '1year' ? plan.oneYearPricing : plan.threeYearPricing;\n      const applicableTier = [...pricing].sort((a, b) => b.minSeats - a.minSeats).find(tier => seats >= tier.minSeats);\n      return applicableTier ? applicableTier.price : 0;\n    }\n\n  }\n\n  PricingService.ɵfac = function PricingService_Factory(t) {\n    return new (t || PricingService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PricingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PricingService,\n    factory: PricingService.ɵfac,\n    providedIn: 'root'\n  });\n  return PricingService;\n})();","map":null,"metadata":{},"sourceType":"module"}